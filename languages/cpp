基类当接口类，实现子类集成的多态：
class RateLimiterInterface {
public:
    virtual ~RateLimiterInterface() {}

    virtual long aquire() = 0;
    virtual long aquire(int permits) = 0;

    virtual bool try_aquire(int timeout) = 0;
    virtual bool try_aquire(int permits, int timeout) = 0;

    virtual double get_rate() const = 0;
    virtual void set_rate(double rate) = 0;
};

2、接口与实现分离：
--interface.h
class Weight;

class WeightProxy
{
public:
    WeightProxy();
    ~WeightProxy();
    void DoSomething();
    std::unique_ptr<Weight> m_proxy;
};

--interface.cpp (这个接口类的实现源文件给调用方参考，或者甚至也编入动态库)
WeightProxy::WeightProxy()
{
    m_proxy = new Weight;
}

ClxExp::~ClxExp()
{

}

void WeightProxy::DoSomething()
{
    m_proxy->DoSomething();
}

此时，提供给调用方的头文件，只需要包含接口头文件+动态库即可。

3、类的const函数，只能在构造函数中初始化；

4、函数的默认参数，只能在函数声明中负值，函数定义处不能再写默认值了，例如：
int set_rate(int rate = 1);   int set_rate(int rate) {}

5、operator new/detele 既可以是全局的，也可以是某个类中的作用域：

#include <iostream>
#include <memory>
#include <string.h>
#include <stdlib.h>
using namespace std;
 

class B;
class A
{
public:
    //weak_ptr<B> pb;
    shared_ptr<B> pb;
    void doSomthing()
    {
        //shared_ptr<B> pp = pb.lock();
        if(pb)//通过lock()方法来判断它所管理的资源是否被释放
        {
            cout<<"sb use count:"<<pb.use_count()<<endl;
        }
    }
  void * operator new(size_t size)
 {
     
     cout<<"new mmm"<<endl;
     return malloc(size);
 }

        void operator delete(void *ptr)
        {
            free(ptr);
        }
    ~A()
    {
        cout << "kill A\n";
    }
};
 
class B
{
public:
    //weak_ptr<A> pa;
    shared_ptr<A> pa;
    ~B()
    {
        cout <<"kill B\n";
    }
};
 
int main(int argc, char** argv)
{
    shared_ptr<A> sa(new A());
    shared_ptr<B> sb(new B());
    if(sa && sb)
    {
        sa->pb=sb;
        sb->pa=sa;
    }
    sa->doSomthing();
    cout<<"sb use count:"<<sb.use_count()<<endl;
    return 0;
}

编译结果如下：
new mmm ===>证明只有 在：shared_ptr<A> sa(new A()); 这里有发生new（）
sb use count:2
sb use count:2

很奇怪的是，如果作用域变成全局的：

#include <iostream>
#include <memory>
#include <string.h>
#include <stdlib.h>
using namespace std;
 
  void * operator new(size_t size)
 {
     
     cout<<"new mmm"<<endl;
     return malloc(size);
 }

        void operator delete(void *ptr)
        {
            free(ptr);
        }
class B;
class A
{
public:
    //weak_ptr<B> pb;
    shared_ptr<B> pb;
    void doSomthing()
    {
        //shared_ptr<B> pp = pb.lock();
        if(pb)//通过lock()方法来判断它所管理的资源是否被释放
        {
            cout<<"sb use count:"<<pb.use_count()<<endl;
        }
    }

    ~A()
    {
        cout << "kill A\n";
    }
};
 
class B
{
public:
    //weak_ptr<A> pa;
    shared_ptr<A> pa;
    ~B()
    {
        cout <<"kill B\n";
    }
};
 
int main(int argc, char** argv)
{
    shared_ptr<A> sa(new A());
    shared_ptr<B> sb(new B());
    if(sa && sb)
    {
        sa->pb=sb;
        sb->pa=sa;
    }
    sa->doSomthing();
    cout<<"sb use count:"<<sb.use_count()<<endl;
    return 0;
}

那么执行的结果变成：
new mmm
new mmm
new mmm
new mmm
sb use count:2
sb use count:2

有四个operator new（）调用，难道智能指针的强引用复制，调用的时候 placement new()???  待验证。

----------------
6、怎样快速将一个类中的移动构造、赋值运算符、拷贝构造置为delete:
class RateLimiterTokenBucket : public RateLimiterTokenBucketInterface 
{
public:
    //qps:限制最大为十亿,受限于时间精度,ns级别
    //burst_factor: 允许瞬间爆发的因子，默认为1，最大为2
    RateLimiterTokenBucket(uint64_t qps, int8_t burst_factor = 1);
    DISALLOW_COPY_MOVE_AND_ASSIGN(RateLimiterTokenBucket);
    };
    
    //added by chenyc,2021.12.23
#ifndef DISALLOW_COPY_MOVE_AND_ASSIGN
#define DISALLOW_COPY_MOVE_AND_ASSIGN(TypeName) TypeName(const TypeName&) = delete; TypeName(const TypeName&&) = delete;  TypeName& operator=(const TypeName&) = delete
#endif //DISALLOW_COPY_MOVE_AND_ASSIGN
--------------------
7、怎么编写枚举值
C++中的枚举类型
C++11提供了更安全的枚举类型，不能再直接把这种枚举值当作整数值来使用。但如果我们想把它作为整数来使用呢？
例如
enum class ElemType
{
    CAP,
    IND,
    VS
};

在以前，我们使用枚举类型的时候，没有添加class关键词，可以如下定义，
enum ElemTypeOld
{
    CAP = 1，
    IND，
    VS = 3
};
在定义了某个枚举变量之后，可以将其与整数直接进行比较。但这样做存在一些问题，因为自定义的整数值可能不连续，某个定义了，其它的没有定义等。
那么输出ElemTypeOld::IND时，会输出2，但如果把CAP的值改为2,那么IND的值就会是3，这就与VS的值一样了。(在ElemType也这样做的时候，也会出现这种情况，类型更安全并不是这个意思。)

在ElemTypeOld里面，不论是否指定整数值，都可以作为整数值来使用，在ElemType里面，只能作为枚举类型，不能与整数值混用。C++里面也提供了将其转化为整数的方法，
static_cast<int>(ElemType::CAP)  -> 0,
如果ElemType里面指定整数值，就会得到指定的整数值。

本来是想整理将枚举类型转化为字符串输出的，但在将其转化为整数的时候遇到了上面的问题。下面进入正题。
一种方法使用swicth语句，
string getElemTypeName(ElemType type)
{
    switch(type)
    {
        case ElemType::CAP : return "CAP";break;
        case ElemType::IND : return "IND";break;
        case ElemType::VS :  return "VS";break;
        default: return "error"; break;    
    }
}
另一种方法，定义常量字符串数组，
const char* names[] = {"CAP","IND","VS"};
string getElemTypeName(ElemType type)
{
    int idx = static_cast<int>(type);
    return names[idx];
}
