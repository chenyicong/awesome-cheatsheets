https://my.oschina.net/miffa/blog/390931   https://github.com/ossrs/srs/issues/775 (srs里面探讨了 加入该socket选项的可能性，里面提到：如果有这个特性，srs-dolphin似乎也没什么用途了。同样
    如果设置了这个选项之后，nginx的多进程fork之后，监听同一个fd的问题，也可以解决了。。)


运行在Linux系统上网络应用程序，为了利用多核的优势，一般使用以下比较典型的多进程/多线程服务器模型：

单线程listen/accept，多个工作线程接收任务分发，虽CPU的工作负载不再是问题，但会存在：

单线程listener，在处理高速率海量连接时，一样会成为瓶颈

CPU缓存行丢失套接字结构(socket structure)现象严重


所有工作线程都accept()在同一个服务器套接字上呢，一样存在问题：

多线程访问server socket锁竞争严重

高负载下，线程之间处理不均衡，有时高达3:1不均衡比例

导致CPU缓存行跳跃(cache line bouncing)

在繁忙CPU上存在较大延迟

上面模型虽然可以做到线程和CPU核绑定，但都会存在：

单一listener工作线程在高速的连接接入处理时会成为瓶颈

缓存行跳跃

很难做到CPU之间的负载均衡

随着核数的扩展，性能并没有随着提升
---------------
SO_REUSEPORT支持多个进程或者线程绑定到同一端口，提高服务器程序的性能，解决的问题：

允许多个套接字 bind()/listen() 同一个TCP/UDP端口

每一个线程拥有自己的服务器套接字

在服务器套接字上没有了锁的竞争

内核层面实现负载均衡

安全层面，监听同一个端口的套接字只能位于同一个用户下面

----------------------------
SO_REUSADDR VS SO_REUSEPORT

因为能力有限，还是有很多东西（SO_REUSEADDR和SO_REUSEPORT的区别等）没有能够在一篇文字中表达清楚，作为补遗，也方便以后自己回过头来复习。

两者不是一码事，没有可比性。有时也会被其搞晕，自己总结的不好，推荐StackOverflow的Socket options SO_REUSEADDR and SO_REUSEPORT, how do they differ?资料，总结的很全面。
https://stackoverflow.com/questions/14388706/how-do-so-reuseaddr-and-so-reuseport-differ


简单来说： (下面的总结也非常漂亮)

设置了SO_REUSADDR的应用可以避免TCP 的 TIME_WAIT 状态 时间过长无法复用端口，尤其表现在应用程序关闭-重启交替的瞬间，提示 addr is already used --- 

SO_REUSEPORT更强大，隶属于同一个用户（防止端口劫持）的多个亲缘进程/线程共享一个端口，同时在内核层面替上层应用做数据包进程/线程的处理均衡  ----若有困惑，推荐两者都设置，不会有冲突。


--- SO_REUSEADDR 除了解决TCP 的 TIME_WAIT 状态 时间过长无法复用端口的问题，还能解决bind多个地址的问题：

To give you a better overview, let's make a table here and list all possible combinations:

SO_REUSEADDR       socketA        socketB       Result
---------------------------------------------------------------------
  ON/OFF       192.168.0.1:21   192.168.0.1:21    Error (EADDRINUSE)
  ON/OFF       192.168.0.1:21      10.0.0.1:21    OK
  ON/OFF          10.0.0.1:21   192.168.0.1:21    OK
   OFF             0.0.0.0:21   192.168.1.0:21    Error (EADDRINUSE)
   OFF         192.168.1.0:21       0.0.0.0:21    Error (EADDRINUSE)
   ON              0.0.0.0:21   192.168.1.0:21    OK
   ON          192.168.1.0:21       0.0.0.0:21    OK
  ON/OFF           0.0.0.0:21       0.0.0.0:21    Error (EADDRINUSE)
  
------------------------  SO_REUSEADDR 对于  UDP端口 的重复bind()
https://juejin.cn/post/7042955679627214856
https://www.cnblogs.com/hehehaha/p/6332274.html
https://blog.csdn.net/tennysonsky/article/details/44062173
简单来讲就是：对于组播，多个bind后的socketfd都可以接收到消息， 对于单薄，也允许多个socketfd的多次绑定，但是只有最后一个bind的fd能够接收到消息
